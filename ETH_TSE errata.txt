
Description

Due to the default timeout period in the Simple Socket Server template,  there is a possibility that auto-negotiation at 1G speed may fail in  Cyclone® V, Cyclone® 10, Max® 10 devices.

Resolution

To work around this problem, the user is required to modify the BSP source code to increase auto-negotiation timeout delay and recompile to generate the new ELF file using the instructions below.

Open the following file in the project directory:

../software/<project_name_bsp>/drivers/src/altera_avalon_tse.c


Change the timeout delay   from "usleep(1000)"   to "usleep(5000)" as shown in the next portion of code:

alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {

………………………………….

while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){

     
if(timeout >  timeout_threshold) { tse_dprintf(4, "WARNING : PHY[%d.%d] - Auto-Negotiation FAILED\n", mac_group_index, mac_info_index);

 

/* Restore previous MDIO address */

alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);

return TSE_PHY_AN_NOT_COMPLETE; 

              
}

               
usleep(5000); //updated from usleep(1000)

}


*******************************************************************************
NOTE: This edit is near line number 1610 in the altera_avalon_tse.c  that
NOTE: uses the MSGDMA controller _bsp auto-generated by Quartus 20.1.  The
NOTE: other usleep(1000) that does not get changed is near line number 1671.
*******************************************************************************



----------------------------------------------------------------------------------

 Description

Due to a problem in Nios® II Software Build Tool, the default settings for Nios® II Simple Socket Server (RMII) template is not targeted to MARVELL PHY, which resulted in wrong PHY configurations causing Ethernet link down. This problem is observed in Nios® II SBT version 17.1 onwards.
Resolution

To work around this problem the user is required to modify below parameters in template to enable MARVELL PHY RGMII configurations.

Browse to project directory: ../software/<project_name>/tse_my_system.c

Step 1. Uncomment the next definition:

/* if using marvell phy and you want rgmii mode, uncomment this define */

#define SET_MARVELL_RGMII_MODE //uncomment this definition to enable RGMII

#ifdef SET_MARVELL_RGMII_MODE

   #define ADDITIONAL_PHY_CFG  &marvell_cfg_rgmii

#else

   #define ADDITIONAL_PHY_CFG  0

#endif 

 

 

Step 2. Find the definition "ifdef DESCRIPTOR MEMORY BASE" and verify the first argument from function TSE_SYSTEM_EXT_MEM_NO_SHARED_FIFO to be declared as "ETH_TSE" and not as "TSE_0_TSE"

As shown in the next code portion:

 

#ifdef DESCRIPTOR_MEMORY_BASE

alt_tse_system_info tse_mac_device[MAXNETS] = {

TSE_SYSTEM_EXT_MEM_NO_SHARED_FIFO(ETH_TSE, 0, TSE_0_DMA_TX, TSE_0_DMA_RX, TSE_PHY_AUTO_ADDRESS, ADDITIONAL_PHY_CFG, DESCRIPTOR_MEMORY)


NOTE:  I had to further edit the above line in tse_my_system to also change the DMA names (at line 27):

#ifdef DESCRIPTOR_MEMORY_BASE
alt_tse_system_info tse_mac_device[MAXNETS] = {
        TSE_SYSTEM_EXT_MEM_NO_SHARED_FIFO(ETH_TSE, 0, MSGDMA_TX, MSGDMA_RX, TSE_PHY_AUTO_ADDRESS, ADDITIONAL_PHY_CFG, DESCRIPTOR_MEMORY)






     

};

